{
  "hash": "e2e2bc3b06e9100f341405aed4b2504f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reference\"\nexecute:\n  echo: false\n---  \n\n\n\n\n# Function Reference\n\nBelow is the list of functions available in the `packageSkeleton` package.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```````\n# DESCRIPTION\n\n``````\nPackage: packageSkeleton\nVersion: 0.0-0.1\nDate: 2024-10-14\nTitle: A GitHub repository featuring a starter template for R package development, paired with a Quarto-powered website\nDescription: The packageSkeleton R package provides a comprehensive template to jumpstart the development of an R package, complete with a structured framework for coding, documentation, and version control. It simplifies the process of setting up an R package repository on GitHub, offering built-in integration with Quarto for generating a professional, customizable website to showcase package documentation and vignettes. This template is designed to help both new and experienced R developers streamline package creation while ensuring best practices in documentation and collaboration. With minimal setup, users can focus on building and sharing valuable tools within the R ecosystem.\nAuthors@R: c(person(given=c(\"Damian\", \"W.\"), family=\"Betebenner\", email=\"dbetebenner@nciea.org\", role=c(\"aut\", \"cre\"), \n\t\tcomment = c(ORCID = \"0000-0003-0476-5599\")),\n                person(given=c(\"Adam\", \"R.\"), family=\"Van Iwaarden\", email=\"avaniwaarden@nciea.org\", role=\"aut\"))\nMaintainer: Damian W. Betebenner <dbetebenner@nciea.org>\nDepends: R (>= 4.0)\nSuggests: knitr, rmarkdown\nImports: crayon, testthat, toOrdinal\nURL: https://CenterForAssessment.github.io/packageSkeleton\nBugReports: https://github.com/CenterForAssessment/packageSkeleton/issues\nVignetteBuilder: knitr\nLazyData: Yes\nLazyDataCompression: xz\nLazyLoad: Yes\nByteCompile: TRUE\nLicense: MIT + file LICENSE\nEncoding: UTF-8\n``````\n\n# `Hello_World`: Hello World Sample Dataset\n\n## Description\n\nThe `Hello_World` dataset provides a simple example with greetings in different languages, useful for illustrating basic data frame operations in R.\n\n## Usage\n\n``````r\nHello_World\n``````\n\n## Format\n\nA data frame with 10 rows and 2 variables:\n\n* `Language`: A character vector indicating the language of the Hello World greeting.\n* `Hello_World_Greeting`: A character vector containing the word \"Hello\" in different languages.\n\n## Source\n\nManually created for demonstration purposes.\n\n## Examples\n\n``````r\n# Display the hello_world dataset\nHello_World\n\n# Access the greeting column\nHello_World$Hello_World_Greeting\n\n# Access the language column\nHello_World$Language\n``````\n\n# `packageSkeleton-package`: A GitHub repository featuring a starter template for R package development, paired with a Quarto-powered website.\n\n## Description\n\nThe packageSkeleton R package provides a comprehensive template to jumpstart the development of an R package, complete with a structured framework for coding, documentation, and version control. It simplifies the process of setting up an R package repository on GitHub, offering built-in integration with Quarto for generating a professional, customizable website to showcase package documentation and vignettes. This template is designed to help both new and experienced R developers streamline package creation while ensuring best practices in documentation and collaboration. With minimal setup, users can focus on building and sharing valuable tools within the R ecosystem.\n\n## Keyword\n\npackage\n\n## Details\n\n|         |               |\n|---------|---------------|\n|Package: |packageSkeleton|\n|Type:    |Package        |\n|Version: |0.0-0.1        |\n|Date:    |2024-10-14     |\n|License: |GPL-3          |\n|LazyLoad:|yes            |\n\n## Author\n\nDamian W. Betebenner [DBetebenner@nciea.org](mailto:DBetebenner@nciea.org)\n\n# `strHead`: Returns the first `n` characters of a string, with support for negative values.\n\n## Description\n\nThe `strHead` function extracts the first `n` characters of a provided string. If `n_char` is positive, it returns the first `n_char` characters; if negative, it returns all but the last `abs(n_char)` characters. The function handles input validation, ensuring that `n_char` is within the bounds of the string length. It's useful for quickly trimming strings to desired lengths.\n\n## Usage\n\n``````r\nstrHead(\n\tstring,\n\tn_char=1)\n``````\n\n## Arguments\n\n* `string`: Character string or vector of character strings.\n* `n_char`: Number of characters to take from the head (starting at the first character) of the string (or vector of strings). A positive value returns the first `n_char` characters, while a negative value removes the last `abs(n_char)` characters from the end. Defaults to 1.\n\n## Keyword\n\nmisc\n\n## Keyword\n\nmodels\n\n## Details\n\nThe `strHead` function is typically used to extract the first few characters from a character string or each string in a vector of character strings. This can be useful for truncating strings or extracting prefixes. The function supports both positive and negative values for `n_char`, allowing flexible string extraction. For positive values, the function returns the first `n_char` characters, while for negative values, it returns all but the last `abs(n_char)` characters.\n\n## Author\n\nDamian W. Betebenner [dbetebenner@nciea.org](mailto:dbetebenner@nciea.org)\n\n## Value\n\nThe function returns a character string or a vector of character strings, depending on the input. The output consists of the first `n_char` characters from each string in the input. If `n_char` is negative, the result excludes the last `abs(n_char)` characters from each string.\n\n## Examples\n\n``````r\n# Example 1: First two characters of each state name\nstrHead(state.name, 2)\n\n# Example 2: First three characters of a single string\nstrHead(\"California\", 3)\n\n# Example 3: Remove the last two characters from each string in a vector\nstrHead(c(\"apple\", \"banana\", \"cherry\"), -2)\n\n# Example 4: Get the first character of each month name\nstrHead(month.name, 1)\n\n# Example 5: Handle a vector of different length strings\nstrHead(c(\"wolf\", \"elephant\", \"giraffe\"), 4)\n``````\n\n# `strTail`: Returns the last `n` characters of a string, with support for negative values.\n\n## Description\n\nThe `strTail` function extracts the last `n` characters of a provided string. If `n_char` is positive, it returns the last `n_char` characters; if negative, it returns all but the first `abs(n_char)` characters. The function handles input validation, ensuring that `n_char` is within the bounds of the string length. It's useful for quickly trimming strings to desired lengths.\n\n## Usage\n\n``````r\nstrTail(\n\tstring,\n\tn_char=1)\n``````\n\n## Arguments\n\n* `string`: Character string or vector of character strings.\n* `n_char`: Number of characters to take from the tail (starting at the last character) of the string (or vector of strings). A positive value returns the last `n_char` characters, while a negative value removes the first `abs(n_char)` characters from the start. Defaults to 1.\n\n## Keyword\n\nmisc\n\n## Keyword\n\nmodels\n\n## Details\n\nThe `strTail` function is commonly used to extract the last few characters from a character string or each string in a vector of character strings. This is helpful when you need to retrieve suffixes or the end portion of strings. The function supports both positive and negative values for `n_char`. For positive values, the function returns the last `n_char` characters, while for negative values, it excludes the first `abs(n_char)` characters from the start of each string.\n\n## Author\n\nDamian W. Betebenner [dbetebenner@nciea.org](mailto:dbetebenner@nciea.org)\n\n## Value\n\nThe function returns a character string or a vector of character strings, depending on the input. The output consists of the last `n_char` characters from each string in the input. If `n_char` is negative, the result excludes the first `abs(n_char)` characters from each string.\n\n## Examples\n\n``````r\n# Example 1: Last two characters of each state name\nstrTail(state.name, 2)\n\n# Example 2: Last three characters of a single string\nstrTail(\"California\", 3)\n\n# Example 3: Remove the first two characters from each string in a vector\nstrTail(c(\"apple\", \"banana\", \"cherry\"), -2)\n\n# Example 4: Get the last character of each month name\nstrTail(month.name, 1)\n\n# Example 5: Handle a vector of different length strings\nstrTail(c(\"wolf\", \"elephant\", \"giraffe\"), 4)\n``````\n```````\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}